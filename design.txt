Memory Match Game Design Document


====================================================================
***included functionality to read card images specified by a configuration file, allowing the program to use different sets of cards. ***
config file is "config.json" and it is in the same directory as the game file.
key is "card_group"
and there are two values already exist that you can choose from:
"config_poker_cards.txt" , that is self.group_ind=0
"config_dog_cards.txt", that is self.group_ind=1
"config_cat_cards.txt", that is self.group_ind=1
====================================================================

Memory Match Game - Design Document
Project Overview
The Memory Match Game is a card-matching game implemented in Python using the turtle graphics library. The player flips over cards to match pairs, aiming to find all matching pairs with the fewest guesses possible. The game tracks the leaderboard and displays a win screen once all pairs are matched. The game also provides various customizable options, including card themes, card count, and speed settings.

1. Game Architecture
1.1 Core Class: MemoryMatchGame
MemoryMatchGame:
The primary class responsible for managing the game's main logic, including initialization, starting a new game, matching cards, handling game win conditions, and user interaction via the graphical interface.
It uses the turtle graphics library to create the game window and handle user input.
It loads configuration settings from a config.json file to allow customization (e.g., screen size, card theme, number of cards).
1.2 Key Components
Card:

Represents a single card in the game, which includes the front image, back image, and the current state (face-up or face-down).
The Card class provides methods to flip the card and update its graphical representation.
Each card has a position on the screen and responds to user clicks for flipping.
LeaderBoard:

Manages the leaderboard by storing player names and their guess counts.
It allows for saving and loading of leaderboard entries to and from a file (JSON format).
After each game, the leaderboard is updated based on the player's performance (fewer guesses = better score).
CardArea, LeaderboardArea, and StatusArea:

These components are responsible for displaying the different areas of the game:
CardArea: The main area where the cards are displayed.
LeaderboardArea: The area showing the top player scores.
StatusArea: Displays game status, such as the number of moves made and the number of matches found.
Each area updates dynamically based on game events (e.g., the status bar shows current moves and matches).
2. Game Flow
2.1 Starting the Game
Player Name: The game prompts the player to enter a name at the beginning.
Card Count Selection: The player chooses how many cards to play with: 8, 10, or 12 cards.
Card Group Selection: The player can choose a card group (e.g., poker cards). The card images are loaded from a specified directory, and this choice can be customized in the configuration file (config.json).
2.2 Game Play
The game starts with all cards face down.
The player clicks on two cards at a time to flip them over and check if they match.
If a match is found, the cards are hidden. If no match is found, the cards are flipped back after a short delay.
The game tracks the number of moves made and the number of matched pairs found.
2.3 Winning the Game
The game ends when all pairs have been matched.
A win screen is displayed, and the player's name and number of moves are recorded in the leaderboard.
2.4 Game Controls
Quit Button: A graphical button allows the player to quit the game.
New Game Button: Another button allows the player to start a new game.
3. Configuration
3.1 config.json
The gameâ€™s behavior and appearance can be customized through a config.json file. Here, the following settings can be adjusted:

Screen Dimensions: Customize the width and height of the game screen.
Card Dimensions: Set the width and height of individual cards.
Card Themes: Define different card groups (e.g., poker cards, custom images).
Speed: Adjust the speed of the game animations.
Example config.json:
json

{
    "HALF_SCREEN_WIDTH": 400,
    "HALF_SCREEN_HEIGHT": 400,
    "CARD_AREA_WIDTH_RATIO": 0.6,
    "CARD_AREA_HEIGHT_RATIO": 0.6,
    "LEADBOARD_WIDTH_RATIO": 0.3,
    "STATUS_HEIGHT_RATIO": 0.2,
    "LEAVE_BLANK_W_RATIO": 0.05,
    "LEAVE_BLANK_H_RATIO": 0.05,
    "CARD_WIDTH": 100,
    "CARD_HEIGHT": 150,
    "QUIT_IMAGE": "memory_game_2024/quitbutton.gif",
    "WARNING_IMAGE": "memory_game_2024/card_warning.gif",
    "IMAGE_PATH": "images/",
    "BACK_IMAGE": "memory_game_2024/card_back.gif",
    "WIN_IMAGE": "memory_game_2024/winer.gif",
    "NEW_GAME_IMAGE": "memory_game_2024/new_game.gif",
    "CARD_GROUPS": ["config_poker_cards.txt"],
    "speed": 10
}
4. Game Logic
4.1 Flipping Cards
When the player clicks on a card, the card is flipped over (if it is not already face-up and if fewer than two cards are currently flipped).
If two cards are flipped, the game checks if they match by comparing their front images.
If they match, the cards are hidden and removed from the screen. If they don't match, they are flipped back over after a short delay.
4.2 Matching and Score Keeping
The game tracks the number of guesses the player makes (guess_count).
For each pair of matching cards, the game updates the number of matches found (matches).
When all pairs are matched, the player wins the game, and their score is recorded in the leaderboard.
5. Leaderboard
Leaderboard keeps track of top scores for each configuration of the game (based on the number of cards used).
Scores are sorted by the fewest guesses (lower guesses are better).
The leaderboard is saved to a leader_log.json file after each game.
6. User Interface
The game uses the turtle library to create a simple graphical interface:

Card Area: Displays the cards laid out in rows and columns.
Leaderboard Area: Shows the top scores.
Status Area: Displays current game status, including the number of moves and matches.

7. How to Run the Game
Clone the repository:
bash
https://github.com/thomaszhang2661/memory_game.git

Navigate to the project directory:
bash

cd memory-match-game
Run the Python script to start the game:
bash
python memory_match_game.py
8. License
This project is licensed under the MIT License - see the LICENSE file for details. 12. References

Reference
https://northeastern.instructure.com/courses/192349/assignments/2493977?module_item_id=11204670
https://drive.google.com/file/d/1WLoTvoFZWkwTpMONn7GIdeJRmRnCiGX2/view?pli=1